NOTE: ASCII diagrams here were drawn with http://asciiflow.com/

2014-06-26	Layout
	You must specify either the width or the height of an element. If the element contains only text, then its height
	is known. But... what if that element spans multiple lines, then its height is not known.

2014-06-27	Layout - the answer
	We DO need to do something like recursive layout, but we can probably do it with a single pass.
	The key concept to add is "minimum width". Text is a strange thing, because it has no size up
	front, and it can take on many forms. So in order to lay out a text box, you need to give it
	a maximum width. Text in turn, has a minimum width, which I guess is the width of an "m".

2014-06-28	Layout - vertical alignment
	It doesn't make sense for anything other than xoDomText elements to have valign:baseline, so
	this should be illegal for xoDomNode elements. Although.. what about images? It might be useful
	to align images onto the baseline. So perhaps instead of "valign", we have binding points, which
	are expressed as child-bind-point:parent-bind-point. To align a text item to its parent's
	baseline, you write baseline:baseline. Then, if you want to align the bottom of an image to
	the baseline of its parent, you write bottom:baseline.
	There is also this problem that xoDomText elements are leaves, and they may not specify any
	style of their own. Whatever style they have needs to be inherited. I guess that's not really a
	problem, except for the small issue that you'd need to set an alignment of baseline:basline on
	a node that is not a xoDomText node, simply so that its child text leaves could inherit that
	style. The question then remains: what is the binding of the non-text node that houses the text?
	The answer is very simple: The baseline is defined as the baseline of your first child node with
	a non-null baseline. So almost all nodes will end up having a baseline defined.

	A box node may have zero, one, or two horizontal bind points. The same rule applies to vertical
	bind points. Text nodes may not have two bind points, because that doesn't make any sense. Text
	cannot be stretched, but boxes can. By far the most common text bind setting will be 
	baseline:baseline. As for text's horizontal bind points, left:left sounds like the right default.
	We might want to allow numerous bind points for boxes, such as left-mbox, left-bbox, left-cbox,
	which refer to left margin box, left border box, left content box.
	Another very important bind point is "center". In order to center a box horizontally inside its
	parent, you can write hcenter:hcenter.

2014-07-01	Layout - conceptual space
	I've realized that it's useful to think of the initial layout canvas as a cartesian space
	without any bounds. If there happens to be a box that bounds this space, then that box
	can be overlayed onto the cartesian space, and used for clipping or for flow. The key
	observation here is that you don't want to start out thinking "inside the box", because
	it limits the way you think.
	
	I am starting on xoLayout2, which will be more free, less box oriented.

	How about this:
	Every node starts with its own local coordinate system, origin 0,0.
	It's only inputs are ParentWidth, ParentHeight, ParentBaseline, any of which
	may be null.
	It's only outputs are NodeWidth, NodeHeight, NodeBaseline. NodeBaseline
	is the baseline of the first child that returned a non-null baseline. The only
	nodes that are original producers of a non-null baseline are xoDomText objects
	(ie leaf text objects). BUT - what if you want a baseline defined by an object
	that is going to have text, but has no text yet. Yeah, so that doesn't work.
	The baseline needs to be defined by the deepest object that CAN have text.
	Right now the only thing I can think of that can't have text is an <img>.
	The node then calculates its specified width and height, if any. Having said
	that, do we even need an <img> tag? Why not just a rectangle with a
	background image?
	However, the idea may still be useful. Perhaps there is a style such as
	has-baseline: false. This stops the depth-first search for a baseline.

2014-07-10	Layout
	I am going to try writing Layout2 in such a way that performance is terrible.
	For example, I am making it such that each node does not know where in space
	it is situated. All it knows is it's parent width, height, and baseline.
	After the node is finished rendering, its parent moves it to the right place.
	This is daft, but I believe I'll quite easily be able to make it more sensible
	from a performance perspective. It has the purity that each node receives the
	absolute minimum that it needs in order to render itself. This is really just
	to help me reason about it - I doubt I'll retain any of this design.

2014-07-11	Layout
	Last night I realized that my "terribly performant" approach mentioned above
	actually has a trivial solution with good performance: Make coordinates in
	render nodes relative. What exactly they are relative to is an open question,
	but probably just relative to the "top-left" of their parent render node makes
	sense. This way, when you reposition a node, all of its children go along for
	the ride, at no cost.
	
2014-07-13	Layout
	It doesn't make sense for an object to participate in flow and binding in the
	same dimension. For example, if a container has two <lab> objects that both
	have hcenter:hcenter style. This doesn't make any sense, so it should be
	flagged, ignored, or disallowed. Perhaps if an object has had a non-zero flow
	offset applied to it in a particular dimension, then any subsequent bind
	in that same dimension is ignored or disallowed.

2014-07-16	Layout - baseline
	I'm having trouble getting baseline alignment right. There is both the upward
	propagation of baseline, and the downward propagation of it, and I think
	perhaps I'm confusing the two. It seems right that a text object never listens
	to anybody else's baseline, but instead always defines its own. The only
	object that can be aligned by baseline is a node object. So typically a <lab>
	with a single text element inside it will be aligned to baseline. But what
	if you want to align <div><lab>text</lab></div>, all onto the baseline of
	"text". I'm thinking here of doing something like an edit control, or a
	radio button, etc, where the entire control's positioning hangs around that
	text element inside it. So, an object has its own baseline, and that is
	derived from its children. Then the object's parent also has its own baseline,
	and those two come together to compute an offset. Yes.. it does indeed look
	like I'm confusing those two. They need to be kept separate all the way.

2014-07-17	Layout - baseline
	I have a new way of thinking about baseline: Whenever a baseline:baseline
	alignment occurs, it destroys the inner "baseline". Actually.. that's wrong.

2014-07-23	Layout - baseline
	[Invalidated by 2015-01-16]
	I have decided to ignore the thorny problem of aligning to baseline deep
	inside the tree. Instead, if one wants baseline:baseline to work, then
	you must specify it high up in the tree, like so:

	+------------------------------------------------------------------------------+
	|1                                                                             |
	| +-------------------------------+                                            |
	| |2                              |                                            |
	| |                               |  +-------------------------------------+   |
	| |                               |  |4                                    |   |
	| | +---------------------------+ |  |                                     |   |
	| | |3                          | |  | +---------------------------------+ |   |
	| | | This defines the baseline | |  | |5 This aligns to the left text   | |   |
	| | |                           | |  | +---------------------------------+ |   |
	| | +---------------------------+ |  |                                     |   |
	| |                               |  |                                     |   |
	| +-------------------------------+  +-------------------------------------+   |
	|                                                                              |
	+------------------------------------------------------------------------------+


	In the above diagram, text item 3 defines the inner baseline for itself and in turn
	items 2, and then item 1.

	Likewise for the right side, text item 5 defines the inner baseline for itself,
	and then for item 4. It does not override item 1's baseline, because a node's
	inner baseline is taken from the first item inside it that defines an inner baseline.

	Let's run through the rendering of item 1.
	Let's assume that item 2 is vertically centered. On the first pass, items 2 and 4 are flowed.
	Item 2 ended up defining the baseline for 1. The second pass is the alignment pass.
	First it's item 2's turn to align. It is aligned vcenter:vcenter, so it ends up vertically
	centered inside item 1. Item 1 remembers that its baseline came from item 2, so it
	also applies this alignment offset to the baseline.
	Next, it is item 4's turn to do alignment. Item 4 is aligned baseline:baseline.
	Item 4 received its inner baseline from item 5. When item 4 is aligned, it aligns
	its inner baseline with its outer baseline. Item 4's outer baseline is item 1's
	inner baseline, which originally came from item 3. This works, and there are
	no complications here or concerns about recursive layout conditions.

	However, imagine that instead of item 4 being aligned baseline:baseline, item 5
	was aligned baseline:baseline. This would be problematic, because by the time
	the second phase of item 1's layout runs (ie the alignment phase), it is too late
	for item 5. By that stage, item 5 has already had its second phase run.

	The takeaway is that if you want to align baseline:baseline, then you need to do so
	high up in the DOM tree, otherwise you'll end up unaligned due to objects above you
	being re-aligned after you've aligned to baseline.

	I have tried to think of a more robust solution that allows deeper children to
	align to baseline, but so far I haven't come up with anything.

	It is also worth mentioning here that nothing stops you from aligning deeper
	children to baseline. You will get predictable results if the nodes containing
	that deeper child do not have any alignment applied to them, and if the 
	node that defined the baseline also has no alignment applied to it.

2014-07-24	Layout - baseline
	In the interest of consistency it might be a good idea to form a tight binding
	between the thing that defines the baseline and any box that aligns itself
	to that baseline. In other words, keep track of such pairs, and perform some
	kind of fixup late in the layout process. But that is getting quite hackish.

2014-08-02	Render node reference frame
	Right now the frame of reference for xoRenderDomEl.Pos is the parent node's content
	box. This forces us to store Padding inside xoStyleRender. I'm pretty sure this
	is a waste of space. It would be more efficient to make the frame of reference
	the border-box of the parent node. I fear I'm going to get confused by doing that,
	so for now I'm sticking with this. It should be a fairly trivial optimization to
	fix this up later.

2014-08-11	Baseline after linebreak
	Every time you do a linebreak, you need to reset your inner baseline to null.
	I wonder now whether it would be a good idea to place every line in its own box.
	HTML certainly does something like this. I'm going to first try not creating
	virtual boxes, and just maintaining a unique inner baseline for every line inside
	a box.
	UPDATE: That seems to work OK.

2014-08-18	Rename project to "xo"

2014-10-26	Universal layout
	I have been struggling to come up with a simple solution that unifies text and
	non-text nodes. HTML solves this by splitting objects into Block and Inline,
	and Inline-Block, which as far as I can tell is just Inline with a fixed width.
	At present, my solution is this:
	Every DOM node can either define its own flow context, or it can inherit the
	flow context of its parent. Take this example:

	Body                                          
	+--------------------------------------------+
	|                                            |
	| +---------------------+ +------------+     |
	| |                     | |            |     |
	| | The quick brown fox | | jumps over |     |
	| |                     | |            |     |
	| +---------------------+ +------------+     |
	|                                            |
	| +----------+ +-----+                       |
	| |          | |     |                       |
	| | the lazy | | dog |                       |
	| |          | |     |                       |
	| +----------+ +-----+                       |
	|                                            |
	+--------------------------------------------+

	and its definition:

	<body>
		The quick brown fox <span style='background-color: red'>jumps over the lazy</span> dog
	</body>

	In this example, the root node (ie body) gets its own flow context. The first rectangle
	inside it is the text element "The quick brown fox". Let's ignore exactly how that
	element is layed out, and proceed onto the <span> element, which is more interesting,
	because it is broken across a line. It is clear from this example that it is enticing
	to treat words as first-class rectangles, the same way we treat a <div> object, or 
	any other DOM node. However, we have this problem that we want things such as <span>
	objects to be splittable, but other object we want indivisible. The solution, I believe,
	is not to declare objects "splittable", but rather to declare that an object does not
	define its own flow context, but rather it injects itself into the flow context of its
	parent. In this example, a <span> object is such an object. Also, all text nodes
	share this property. The inner objects of a text node, however, do not. They are words
	of text, and they are rectangle objects.
	I am struggling to find a name for these two distinctions. It is tempting to say "block"
	and "inline", but I fear confusion with HTML here. How about a property of an object,
	which is either flow-context: parent, or flow-context: self.
	A text object must always have flow-context: parent.

2014-10-27	Layout3
	It looks like I have failed a second time to write layout code that is clean. What I am
	going to do next is to write the layout algorithm such that there is an interface
	barrier between itself and the DOM data structure.

2014-10-28	Alternate things
	In an experimental project like this I find it's easy to lose hope that it will ever
	get anywhere, particularly because the project needs great code infrastructure, as well
	as unique features. If you spend all your time doing features, then	you'll neglect the
	infrastructure, and vice versa. By infastructure I mean things like making all heap
	allocations controllable, or an easy build process. Perhaps a reasonable thing to
	do is alternate working on features and infrastructure.

2014-12-10	Splitting a <span> across lines
	I was battling for a while on how to split a <span> across multiple lines. One particular
	behaviour that I am looking for is that if a <span> element has a non-zero border-radius,
	then it's borders should be round on all of the lines where it exists. In other words,
	all of the distinct blocks of the <span> should have nice round borders, instead of
	just nice borders at the start and end, with abrupt hard edges on the line edges where
	the <span> is broken.
	My thinking here is that in your output representation, you simply need to repeat the
	<span> object multiple times. This is obvious in hindsight, but at first it confused me,
	because I was thinking of making every word a <span>, but it's simpler than that.

	If we have this example: <span>quick brown fox</span>
	And let's say that there is a line break after the "quick", and then "brown fox" fit
	on the same line. Our render representation then looks like this:
	<span>quick</span>
	<span>brown fox</span>

	This is simple enough. However, where it starts to get confusing is when we think
	about the fact that the text objects are not just word boxes, but word boxes inside
	text objects. So from <span> down to words, we are actually looking at three levels
	(span, text, word). Where did the text object disappear then? We split the <span>
	according to how the words flowed, but we just kind of forgot about the text object.

2015-01-05	Whitespace in our markup language
	I want to be able to write markup like so:
	<div>
		<div>foo <span style='color: #f00'>bar</span></div>
	</div>

	The thing to note about the above markup is that the whitespace in "foo " is important.
	What's also important is that we have the ability to indent the inner <div> without it
	affecting the document. So, the rule is that any text that is pure whitespace is
	ignored. If you want to have a text object consisting solely of whitespace, then make
	sure it contains at least one &sp; element, which is just an escape sequence for
	a regular space character (ie ascii 32).
	
	And now I'm thinking, maybe a LISP-ish thing would be better...
	<div
		<div 'foo ' <span style='color: #f00' 'bar'>>
	>

	And while we're at it, why don't we remove the need for the 'style' attribute:
	<div
		<div 'foo ' <span color: #f00 'bar'>>
	>

	That's looking closer to something one might be able to create as a DSL in C++.

2015-01-07	Boxer
	AT LAST. All I needed was a chunk of uninterrupted time to figure out how to
	write xoBoxLayout3 in such a manner that it takes care only of the box layout,
	and not of populating the renderer's data structures, nor the specifics of
	text. xoBoxLayout3 now deals only in boxes, and inline flow on a simple example
	also works.
	
2015-01-10	Recursive inline flow
	Recursive inline flow is where you have more than one <span> object. For example,

	<div id='abc'>
		<span class='red-border'>
			<span class='blue-border'>quick brown fox</span>
		</span>
	</div>

	Imagine the scenario where "quick brown" fits on a line, but "fox" flows onto
	the next line. What you want in this case is for "quick brown" to have a blue
	border on the inside, and a red border on the outside. Likewise for "fox",
	it must get two different boxes surrounding it. There are different ways of
	achieving this, but what I'm thinking of right now is that when a text object
	notices that a word flows onto a new line, then it bubbles out to it's closest
	ancestor with it's own flow context. That closest ancestor ('abc' in our example)
	then restarts its rendering process, but skips all of the elements that have
	already been dealt with.
	
	Now let's look at a slightly more complex example:

	<div id='abc'>
		<span class='red-border'>
			<span class='bold'>THE</span>
			<span class='blue-border'>quick brown fox</span>
		</span>
	</div>

	Imagine again, "THE quick brown" fits on a line, and "fox" flows onto a new line. 
	Before "fox" is emitted, we need to detect that it is going to flow, and
	buble out to 'abc', so that a new 'red-border' span can be created, as well
	as a new 'blue-border' span. Note however, that when the rendering is restarted,
	we skip over the span containing 'THE'. We also skip over "quick brown", of course.

2015-01-16	Alignment
	I have realized that aligning things to baseline is actually easier than I
	previously thought. You don't need to maintain any kind of "parent baseline".
	Every node starts with an undefined baseline, and it places it's children
	as though it's the root of the tree. Once it's done, it fills out it's own
	baseline, and that is used by it's parent to place it. The key point here
	is that baseline propagates horizontally (from one node of a branch to it's
	siblings), but it does not move vertically down (from one node to it's
	children). It does however move upward. My original design moved baseline
	down as well as up, but that ends up doing alignment twice, which forced
	one to have to not use baseline:baseline on intermediate nodes. I first
	noticed this was broken when nesting two <span> nodes, which both have
	baseline:baseline.

2015-01-21	Render node reference frame (2)
	In the log entry 2014-08-02, I said that I thought it was redundant storing
	the following three items:
	* ContentBox
	* Padding (x4)
	* Border Size (x4)
	However, I don't know what I was thinking there, because now it seems to me
	that you absolutely DO need to store all three of these things. And I like
	that because storing the content box relative to your parent's context box
	just makes perfect intuitive sense.

2015-01-21	What to do next?
	1. Fix up baselines when wrapping onto next line.
	2. Add line boxes as render nodes, and then bump down line boxes if they
	have content that has extended upward beyond their top. This is for
	if you start a line with a small font, and end it with a big font.
	Instead of having the big font pop out the top of the line, you want
	the whole line box to be brought down. This must be a configurable
	property of the container that holds the line boxes.
	3. Add a new property that takes effect on injection-flow elements,
	allowing one to specify whether their padding, border, and margin
	boxes affect layout. In HTML, adding padding and a border around <span>
	elements doesn't change layout at all. It literally just places a box
	around it's contents, as though it's some kind of post-process step.
	This is a nice thing to use when doing the classic <code> style of
	highlighting pieces of text. Hmm well.. actually in HTML <span> elements
	do affect horizontal layout (ie they increase spacing around words),
	but they don't affect vertical layout. I guess we'll want to be able
	to control which of the two dimensions are affected. See the
	line-heights.html example.

2015-01-22	Bump
	I implemented the feature (3) from the previous post, and called it
	"bump" for desperate lack of a better word. The concept is that you're
	either allowing your padding + border + margin to affect layout, or
	you're not. And you can make that choice in both horizontal and vertical
	dimensions. The default is to have both dimensions affected, but
	for <span> elements, they only affect horizontal bump, which gets us
	the same behaviour as an HTML inline element.

2015-01-24	Nested spans
	Yay! I tested my 'bump' implementation with two nested spans that surround
	some text. I was surprised to see that the inner box's height is the same
	as the outer box's height. It is comforting to see that HTML ends up
	up with the same result. I don't fully understand why this happens, and
	I'm not sure I want it to happen, but I'm OK with letting it slide for now,
	given HTML does the same thing.

2015-01-24	Line boxes
	I'm becoming increasingly convinced that the coordinate space into which
	text is output should be "line box", and not "containing node". We're just
	sort of barely hanging onto understandability with the current management
	of line boxes, but it might be much simpler if we forced line boxes as
	proper elements that went into nodes.

2015-01-26	Baseline alignment x3
	Back in [2015-01-16] I noted that I was getting rid of propagating baseline
	down into nodes. I am now going to try re-instating it, but only for nodes
	that define their own flow. I suspect this is a useful compromise.

2015-01-27	Early alignment
	If one knows the content-width and content-height, then you can do alignment
	immediately after generating a child, instead of doing all alignments after
	all children. This could be useful if you're aligning the child that defines
	your baseline, so that subsequent children get the right baseline. I'm wary
	of it because you'd have to document it, and people might not understand it,
	and just be annoyed by the apparent inconsistency.

2015-01-27	Baseline alignment x4
	Dammit no. Propagating baselines down into nodes is a BAD IDEA. Don't ever
	try that again. HTML doesn't do it. It's horrible. Look at the simple case
	in does-baseline-propagate-downward.html to get a better understanding.
	By propagating baseline downward you're introducing a nightmare of side
	effects. Don't try it again!

2015-06-30	Style bloat
	I'm busy adding left/right/top/bottom background colors, and realizing I'm
	gonna have to do the same for borders, and all of a sudden I'm seeing that
	xoRenderStyle is probably going to continue to grow. I wonder if at some point,
	instead of storing all these styles, you might want to store a vector of
	styles that were combined to produce a particular node. I can see this being
	a thorny problem, and I'm really being irresponsible by not looking at how
	the browsers do it.

2015-07-09	Background color gradients
	My goal here is to reproduce the subtle vertical gradients that one finds
	on Windows 8 buttons. I started out by allowing a style to define 4 colors
	for left/right/top/bottom. That doesn't work at all. It's not even well
	defined. Does your top-left corner get the left color or the top color?
	I was inspired by an old short conversation I had with Michael Herf on
	Twitter, and I'm going to try and do these kinds of things with textures
	instead. If the styling language (ie my CSS ripoff) allows one to define
	textures inline with some amount of ease, then it should be a nice fit.
	One potential gotcha here is interpolating between two textures. For example,
	in Windows 8, when your cursor moves over a button, it quickly becomes
	a blue gradient. When you move your cursor away from the button, it slowly
	fades back to a grey gradient. Assuming 60 different fade states (60 fps
	over 1 second), that's 60 different textures that you'd need to manage.
	This could get tricky - you'd want to be hashing textures, and reusing
	those that you had used before.
	I'm thinking about this here in the context of having a generic "scratch"
	texture that is used as a throwaway canvas. The textures defined by styles
	would need to be uploaded on demand into this scratch texture atlas, and
	we'd need to coordinate this so that the texture is uploaded once at the
	start of a frame. You'd have all of these tiny 2x2 textures inside that
	atlas, and you'd want to reuse them.
	Simply hashing their contents (and dimensions) is the simplest thing I
	can think of, and that ought to work pretty well. But perhaps there is an
	even simpler solution than this: Allow the user to interpolate between
	two textures, but force the user to define textures by giving them names.
	If the user wants to dynamically generate different textures each frame,
	then it's up to the user to define the lifecycle of that texture. I would
	imagine that one would create one such texture, give it a name, and then
	mutate that one texture from one frame to the next. This is actually
	far better than trying to be all smart and generic about it, because most
	of the time your textures are going to be pretty static. Allowing
	interpolation between two textures should suffice for the other big chunk
	of the mutability of textures. The few times when one does need a
	runtime-defined texture, you can manage that thing's lifecycle yourself.
	



