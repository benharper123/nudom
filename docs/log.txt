2014-06-26	Layout
	You must specify either the width or the height of an element. If the element contains only text, then its height
	is known. But... what if that element spans multiple lines, then its height is not known.

2014-06-27	Layout - the answer
	We DO need to do something like recursive layout, but we can probably do it with a single pass.
	The key concept to add is "minimum width". Text is a strange thing, because it has no size up
	front, and it can take on many forms. So in order to lay out a text box, you need to give it
	a maximum width. Text in turn, has a minimum width, which I guess is the width of an "m".

2014-06-28	Layout - vertical alignment
	It doesn't make sense for anything other than nuDomText elements to have valign:baseline, so
	this should be illegal for nuDomNode elements. Although.. what about images? It might be useful
	to align images onto the baseline. So perhaps instead of "valign", we have binding points, which
	are expressed as child-bind-point:parent-bind-point. To align a text item to its parent's
	baseline, you write baseline:baseline. Then, if you want to align the bottom of an image to
	the baseline of its parent, you write bottom:baseline.
	There is also this problem that nuDomText elements are leaves, and they may not specify any
	style of their own. Whatever style they have needs to be inherited. I guess that's not really a
	problem, except for the small issue that you'd need to set an alignment of baseline:basline on
	a node that is not a nuDomText node, simply so that its child text leaves could inherit that
	style. The question then remains: what is the binding of the non-text node that houses the text?
	The answer is very simple: The baseline is defined as the baseline of your first child node with
	a non-null baseline. So almost all nodes will end up having a baseline defined.

	A box node may have zero, one, or two horizontal bind points. The same rule applies to vertical
	bind points. Text nodes may not have two bind points, because that doesn't make any sense. Text
	cannot be stretched, but boxes can. By far the most common text bind setting will be 
	baseline:baseline. As for text's horizontal bind points, left:left sounds like the right default.
	We might want to allow numerous bind points for boxes, such as left-mbox, left-bbox, left-cbox,
	which refer to left margin box, left border box, left content box.
	Another very important bind point is "center". In order to center a box horizontally inside its
	parent, you can write hcenter:hcenter.

2014-07-01	Layout - conceptual space
	I've realized that it's useful to think of the initial layout canvas as a cartesian space
	without any bounds. If there happens to be a box that bounds this space, then that box
	can be overlayed onto the cartesian space, and used for clipping or for flow. The key
	observation here is that you don't want to start out thinking "inside the box", because
	it limits the way you think.
	
	I am starting on nuLayout2, which will be more free, less box oriented.

	How about this:
	Every node starts with its own local coordinate system, origin 0,0.
	It's only inputs are ParentWidth, ParentHeight, ParentBaseline, any of which
	may be null.
	It's only outputs are NodeWidth, NodeHeight, NodeBaseline. NodeBaseline
	is the baseline of the first child that returned a non-null baseline. The only
	nodes that are original producers of a non-null baseline are nuDomText objects
	(ie leaf text objects). BUT - what if you want a baseline defined by an object
	that is going to have text, but has no text yet. Yeah, so that doesn't work.
	The baseline needs to be defined by the deepest object that CAN have text.
	Right now the only thing I can think of that can't have text is an <img>.
	The node then calculates its specified width and height, if any. Having said
	that, do we even need an <img> tag? Why not just a rectangle with a
	background image?
	However, the idea may still be useful. Perhaps there is a style such as
	has-baseline: false. This stops the depth-first search for a baseline.

2014-07-10	Layout
	I am going to try writing Layout2 in such a way that performance is terrible.
	For example, I am making it such that each node does not know where in space
	it is situated. All it knows is it's parent width, height, and baseline.
	After the node is finished rendering, its parent moves it to the right place.
	This is daft, but I believe I'll quite easily be able to make it more sensible
	from a performance perspective. It has the purity that each node receives the
	absolute minimum that it needs in order to render itself. This is really just
	to help me reason about it - I doubt I'll retain any of this design.

2014-07-11	Layout
	Last night I realized that my "terribly performant" approach mentioned above
	actually has a trivial solution with good performance: Make coordinates in
	render nodes relative. What exactly they are relative to is an open question,
	but probably just relative to the "top-left" of their parent render node makes
	sense. This way, when you reposition a node, all of its children go along for
	the ride, at no cost.
	
2014-07-13	Layout
	It doesn't make sense for an object to participate in flow and binding in the
	same dimension. For example, if a container has two <lab> objects that both
	have hcenter:hcenter style. This doesn't make any sense, so it should be
	flagged, ignored, or disallowed. Perhaps if an object has had a non-zero flow
	offset applied to it in a particular dimension, then any subsequent bind
	in that same dimension is ignored or disallowed.

2014-07-16	Layout - baseline
	I'm having trouble getting baseline alignment right. There is both the upward
	propagation of baseline, and the downward propagation of it, and I think
	perhaps I'm confusing the two. It seems right that a text object never listens
	to anybody else's baseline, but instead always defines its own. The only
	object that can be aligned by baseline is a node object. So typically a <lab>
	with a single text element inside it will be aligned to baseline. But what
	if you want to align <div><lab>text</lab></div>, all onto the baseline of
	"text". I'm thinking here of doing something like an edit control, or a
	radio button, etc, where the entire control's positioning hangs around that
	text element inside it. So, an object has its own baseline, and that is
	derived from its children. Then the object's parent also has its own baseline,
	and those two come together to compute an offset. Yes.. it does indeed look
	like I'm confusing those two. They need to be kept separate all the way.

2014-07-17	Layout - baseline
	I have a new way of thinking about baseline: Whenever a baseline:baseline
	alignment occurs, it destroys the inner "baseline". Actually.. that's wrong.

2014-07-23	Layout - baseline
	I have decided to ignore the thorny problem of aligning to baseline deep
	inside the tree. Instead, if one wants baseline:baseline to work, then
	you must specify it high up in the tree, like so:

	+------------------------------------------------------------------------------+
	|1                                                                             |
	| +-------------------------------+                                            |
	| |2                              |                                            |
	| |                               |  +-------------------------------------+   |
	| |                               |  |4                                    |   |
	| | +---------------------------+ |  |                                     |   |
	| | |3                          | |  | +---------------------------------+ |   |
	| | | This defines the baseline | |  | |5 This aligns to the left text   | |   |
	| | |                           | |  | +---------------------------------+ |   |
	| | +---------------------------+ |  |                                     |   |
	| |                               |  |                                     |   |
	| +-------------------------------+  +-------------------------------------+   |
	|                                                                              |
	+------------------------------------------------------------------------------+


	In the above diagram, text item 3 defines the inner baseline for itself and in turn
	items 2, and then item 1.

	Likewise for the right side, text item 5 defines the inner baseline for itself,
	and then for item 4. It does not override item 1's baseline, because a node's
	inner baseline is taken from the first item inside it that defines an inner baseline.

	Let's run through the rendering of item 1.
	Let's assume that item 2 is vertically centered. On the first pass, items 2 and 4 are flowed.
	Item 2 ended up defining the baseline for 1. The second pass is the alignment pass.
	First it's item 2's turn to align. It is aligned vcenter:vcenter, so it ends up vertically
	centered inside item 1. Item 1 remembers that its baseline came from item 2, so it
	also applies this alignment offset to the baseline.
	Next, it is item 4's turn to do alignment. Item 4 is aligned baseline:baseline.
	Item 4 received its inner baseline from item 5. When item 4 is aligned, it aligns
	its inner baseline with its outer baseline. Item 4's outer baseline is item 1's
	inner baseline, which originally came from item 3. This works, and there are
	no complications here or concerns about recursive layout conditions.

	However, imagine that instead of item 4 being aligned baseline:baseline, item 5
	was aligned baseline:baseline. This would be problematic, because by the time
	the second phase of item 1's layout runs (ie the alignment phase), it is too late
	for item 5. By that stage, item 5 has already had its second phase run.

	The takeaway is that if you want to align baseline:baseline, then you need to do so
	high up in the DOM tree, otherwise you'll end up unaligned due to objects above you
	being re-aligned after you've aligned to baseline.

	I have tried to think of a more robust solution that allows deeper children to
	align to baseline, but so far I haven't come up with anything.

	It is also worth mentioning here that nothing stops you from aligning deeper
	children to baseline. You will get predictable results if the nodes containing
	that deeper child do not have any alignment applied to them, and if the 
	node that defined the baseline also has no alignment applied to it.

2014-07-24	Layout - baseline
	In the interest of consistency it might be a good idea to form a tight binding
	between the thing that defines the baseline and any box that aligns itself
	to that baseline. In other words, keep track of such pairs, and perform some
	kind of fixup late in the layout process. But that is getting quite hackish.





